

*** Headers_files_link  :  https://www.ibm.com/docs/en/zos/2.4.0?topic=reference-standard-c-library-header-files


In  C++:
    # Private & Protected.

    1. Private & protected properties can not access in other class and main function.
    2. private & protected inside can not use constructor.
    3. here we can get and set values using getter / setter.


    # Public:

    1. Inside Public we can use constructor like (scope variables).
    2. private value for access always define getter / setter inside the Public. 


* this :
    -> this keyword store current object address.
    -> this keyword used to constructor define object parameter.

* constructor:
    -> default constructor          : class_name(){};
    -> parameterize constructor     : class_name(data_type parameter1, data_type parameter2){};
    -> copy constructor             : class_name obj_name(copied_obj_name); it is define inside main(){}
                                    class_name(class_name &obj_name){
                                        this->properties = obj_name.properties;
                                    }

* destructor : 
    -> for used memory deallocate, for memory free or empty.
    -> tilda_sign (~),  ~class_name(){}; for static
    -> for dynamic manually call delete function or delete keyword.


* static & dynamic access :
    -- static dot (.) operator
    -- dynamic arrow (->) operator
    -- scope resolution operator (::) , double colon.


*** Encapsulation: 
    
    --> encapsulation describes bundling data and methods.
    --> wrapping up data members and functons.
    --> information / data hidding.

    ** properties:
        -> Public               -- inside / outside class anywhere access & can modify.
        -> Private              -- base / parent class can access & access getter/setter access, out side class can not access.
        -> Protected            -- kind of similer private, base & derived class can access, using getter / setter can access.
                                    outside class can not access. 



*** Inheritance : 

    ->> class parent_class{};
    ->> class child_class : access modifire parent_class{};

    ** Inheritance mode :

      -|-----------------|------------------------------------------------------|-
       |                 |                 Derived_class                        |
      -|     Base_class  |---------------|------------------|-------------------|-
       |                 |   Public      |    private       |     protected     |
      -|-----------------|---------------|------------------|-------------------|-
       |     Public      |   Public      |    private       |     protected     |
       |                 |               |                  |                   |
       |     private     |   not access  |    not access    |     not access    |
       |                 |               |                  |                   |
       |     Protected   |   protected   |    private       |     Protected     |
       |                 |               |                  |                   |
      -|-----------------|---------------|------------------|-------------------|-


    ** Inheritance Types : 
        1. single Inheritance
        2. multi-level Inheritance
        3. multiple Inheritance
        4. Hierarchical Inheritance
        5. hybride Inheritance
        6. multipath Inheritance 


        * Hierarchical Inheritance :
            -> Like one parent class have multiple child class or multiple drived class inherite only one base class.

        * Hybride Inheritance: 
            -> Combination of more then one type of inheritance. 
        
        # Inheritance Ambiguity:
            -> A & B two class & inside A & B same_name function like abd(), and C class inherited A & B both.
                when inside the main function C object; object.abc();
                which  abc() will be call?

            SOLUTION IS:        scope resolution operator (::)
                inside main: 
                                object.A::abc();
                                object.B::abc();

    ** Polymorphism:
        poly  -> many 
        morph -> forms 
            --> more then one form.
        
        so, polymorphism is same method/function, same parameter/argument but class is different.
            exp: class A, class B but method and parameters are same in both of class method.

        types of polymorphism:
            1. Compile time polymorphism / static Polymorphism.

                1. function overloading.        -> function name same but parameter different.
                2. operator overloading.    <syntax> return_type operator operator_sign(data_type parameters){}
                                                    exp : void operator+ (int a, int b){
                                                        this-> a = a;
                                                        this->b = b;
                                                        return b-a;
                                                    }
                                                    int main(){
                                                        class_name A;

                                                        A+;
                                                    }

            2. Run time polymorphism / dynamic polymorphism.
                rules:  
                        -> it is must be possible to inheritance
                        -> method name will be same.
                        -> parameter name same.

                -> method overriding 


    ** Abstraction:
        -> Implementaion hidding.
        --> Abstraction is the process of hiding the implementation details and showing only the functionality to the user.

        use cases:
            In C++:
                    -> using access modifires.

            In python: 
                    -> already have buid package / module.
                exp: 
                    from abc import ABC, abstractclassmethod
                    inherite(ABC):                              
                        @abstractclassmethod                    <using decorator>
                        def func(self):
                        pass 



*** Need to know :
    -> interface concept
    -> virtual function
    -> friend function.